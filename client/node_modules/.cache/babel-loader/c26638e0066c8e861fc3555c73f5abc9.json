{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAcfP8_1wQ8c3atc5WnrCXCto8Gi1v2FZ0\",\n  authDomain: \"crwn-db-6711a.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-6711a.firebaseio.com\",\n  projectId: \"crwn-db-6711a\",\n  storageBucket: \"crwn-db-6711a.appspot.com\",\n  messagingSenderId: \"243694284954\",\n  appId: \"1:243694284954:web:c5158149a41adfbd976f23\",\n  measurementId: \"G-GZHEL1WZKV\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  let snapShot;\n\n  try {\n    snapShot = await userRef.get();\n  } catch (error) {\n    console.log(`${error}`);\n  }\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/ctsuser1/Documents/ArunWorkspace/e_commerce_web_site/crwn-clothing/src/firebase/firbase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","error","console","log","exists","displayName","email","createdAt","Date","set","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,MAAMC,MAAM,GAAG;AACdC,EAAAA,MAAM,EAAE,yCADM;AAEdC,EAAAA,UAAU,EAAE,+BAFE;AAGdC,EAAAA,WAAW,EAAE,sCAHC;AAIdC,EAAAA,SAAS,EAAE,eAJG;AAKdC,EAAAA,aAAa,EAAE,2BALD;AAMdC,EAAAA,iBAAiB,EAAE,cANL;AAOdC,EAAAA,KAAK,EAAE,2CAPO;AAQdC,EAAAA,aAAa,EAAE;AARD,CAAf;AAYAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC5E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,MAAIC,QAAJ;;AACA,MAAI;AAEJA,IAAAA,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAjB;AACC,GAHD,CAGE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEF,KAAM,EAArB;AAEA;;AAED,MAAI,CAACF,QAAQ,CAACK,MAAd,EAAsB;AACrB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBb,QAA/B;AACA,UAAMc,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACH,YAAMb,OAAO,CAACc,GAAR,CAAY;AACjBJ,QAAAA,WADiB;AAEjBC,QAAAA,KAFiB;AAGjBC,QAAAA,SAHiB;AAIjB,WAAGb;AAJc,OAAZ,CAAN;AAMA,KAPD,CAOE,OAAOO,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACS,OAAzC;AACA;AACD;;AACD,SAAOf,OAAP;AACA,CA7BM;AAgCP,OAAO,MAAMgB,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMgB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nconst config = {\n apiKey: \"AIzaSyAcfP8_1wQ8c3atc5WnrCXCto8Gi1v2FZ0\",\n authDomain: \"crwn-db-6711a.firebaseapp.com\",\n databaseURL: \"https://crwn-db-6711a.firebaseio.com\",\n projectId: \"crwn-db-6711a\",\n storageBucket: \"crwn-db-6711a.appspot.com\",\n messagingSenderId: \"243694284954\",\n appId: \"1:243694284954:web:c5158149a41adfbd976f23\",\n measurementId: \"G-GZHEL1WZKV\"\n};\n\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n if (!userAuth) return;\n\n const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n let snapShot;\n try {\n  \n snapShot = await userRef.get();\n } catch (error) {\n  console.log(`${error}`);\n  \n }\n\n if (!snapShot.exists) {\n  const { displayName, email } = userAuth;\n  const createdAt = new Date();\n  try {\n   await userRef.set({\n    displayName,\n    email,\n    createdAt,\n    ...additionalData\n   });\n  } catch (error) {\n   console.log('error creating user', error.message);\n  }\n }\n return userRef;\n}\n\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}